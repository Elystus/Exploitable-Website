/*
 * 
 * Database Regeneration Script
 * Login SQL Injection Database
 */

var path    = require("path"),
    sqlite  = require("sqlite3").verbose(),
    crypto  = require("crypto"),
    config  = require("../config"),
    appConfig = require("../../../config");
    
var constructDatabase = function () {
    var db = new sqlite.Database(path.join(appConfig.paths.core, config.baseDir, "database", ("/" +  config.database + ".db")));

    /*
     * Word Array
     * Purpose:
     *      - Random array of words used to generate usernames and passwords (
     */
    var randomWords = ["Apple", "Ape", "Bubble", "Bug", "Beatle", "Cat", "Crocs", "Dog", "Damp", "Elephant", "Frog", "Killer", "Klaus", "Lamp", "Leopard", "Operand", "Quack", "Smack"];
    
    db.serialize(function() {
        // Create Login Table
        db.run("CREATE TABLE if not exists users (id INTEGER PRIMARY KEY AUTOINCREMENT, username TEXT NOT NULL, password TEXT NOT NULL, salt TEXT)");
        // Clear any records
        db.run("DELETE FROM users WHERE 1=1");

        for(i = 0; i < 10 ; i++) {
            // Username and Password generation
            var userR = Math.floor(Math.random() * (randomWords.length - 1)),
                passR = Math.floor(Math.random() * (randomWords.length - 1));

            // Create some totally super secure user/pass combos
            var salt = generateSalt(),
                pass = hashPassword((randomWords[passR] + userR), salt),
                user = randomWords[userR] + passR;
                    
            var stmt = db.prepare("INSERT INTO users VALUES(NULL,?,?,?)");
            stmt.run(user, pass, salt); 
            stmt.finalize();
        };
    });

    db.close();
};

function hashPassword (password, salt) {
    var hash = crypto.createHash('sha256');
    hash.update(password);
    hash.update(salt);
    return hash.digest('hex');
};

function generateSalt () {
    return crypto.randomBytes(256);
};

module.exports = constructDatabase;