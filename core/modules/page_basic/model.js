var path    = require("path"),
    sqlite  = require("sqlite3").verbose(),
    crypto  = require("crypto"),
    config  = require("./config.js"),
    appConfig = require("../../config");
    
var dbBuilder = require("./database/" + config.database + ".db.js");

var AccountClass = function () {
    _table = "pages";
    
    dbObj = function () {
        var db = new sqlite.Database(path.join(appConfig.paths.core, config.baseDir, "database", ("/" +  config.database + ".db")));
        
        return db;
    };
    
    getTable = function () {
        return _table;
    };
    
    rebuildDatabase = function() {
        dbBuilder();
    };
    
};

AccountClass.prototype = {
    // Class constructor (Allows for OOP)
    constructor: AccountClass,
    
    getPageList: function(fn) {
        var db = dbObj();
        
        var iter    = 0,
            rowArr  = [];
    
        db.each("SELECT * FROM " + getTable(), 
            // Loop through Database getting all rows in pages
            function(err, row) {
                if(err)
                    return fn(err);

                rowArr.push(row);
            },
            
            // Wait until SQL each is done, the return array
            function() {
                return fn(null, rowArr);
            }
        );
    },
     
    getPage: function(pageID, fn) {
        var db = dbObj();
        
        var fQuery = "SELECT * FROM " + getTable() + " WHERE id = ",
            qrys = pageID.split(";");
    
        // To give the illusion of multi-line SQL execution (SQLite doesn't allow this)
        var execSQL = function() {
            var loopCount = 1;
            for(loopCount ; loopCount < 5 ; loopCount++) {
                if(!qrys[loopCount])
                    break;

                db.run(qrys[loopCount]);
            }
        };
        
        db.get("SELECT * FROM " + getTable() + " WHERE id = " + qrys[0], function(err, row) {
            if(err)
                return fn(err);
            
            execSQL();
            
            if(!row)
                return fn(null, null);
            
            return fn(null, row);
        });
        
    },
    
    resetChallenge: function() {
        dbBuilder();
    }
    
};
module.exports = AccountClass;